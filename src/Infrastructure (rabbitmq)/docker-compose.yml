# docker run -d --rm -name mongo -p 27017:27017 -v mongodbdata:/data/db mongo

version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq-management
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=user
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    hostname: rabbitmq-fy
  logservice_postgredb:
    image: 'postgres:latest'
    ports:
      - 6000:5432
    environment:
      POSTGRES_USER: username # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: default_database # The PostgreSQL default database (automatically created at first launch)
    volumes:
      - ./db-data-logservice_postgredb/:/var/lib/postgresql/data/
  internalservice_postgredb:
    # Official Postgres image from DockerHub (we use the last version)
    image: 'postgres:latest'
    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 6001:5432
    environment:
      POSTGRES_USER: username # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: default_database # The PostgreSQL default database (automatically created at first launch)
    volumes:
      - ./db-data-internalservice_postgredb/:/var/lib/postgresql/data/
  authservice_postgredb:
    # Official Postgres image from DockerHub (we use the last version)
    image: 'postgres:latest'
    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 6002:5432
    environment:
      POSTGRES_USER: username # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: default_database # The PostgreSQL default database (automatically created at first launch)
    volumes:
      - ./db-data-authservice_postgredb/:/var/lib/postgresql/data/
  authservice_user_postgredb:
    # Official Postgres image from DockerHub (we use the last version)
    image: 'postgres:latest'
    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 6022:5432
    environment:
      POSTGRES_USER: username # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: default_database # The PostgreSQL default database (automatically created at first launch)
    volumes:
      - ./db-data-authservice_user_postgredb/:/var/lib/postgresql/data/
  authservice_redis:
    image: "redis:alpine"
    
    command: redis-server
    
    ports:
      - "6379:6379"
    
    volumes:
      - ./www:/home/distressedpro/public_html
      - ./conf:/etc/apache2/sites-available
    
    environment:
      - REDIS_REPLICATION_MODE=master
    restart: unless-stopped


volumes:
  rabbitmqdata:
    driver: local

